{"version":3,"sources":["pokeService.js","stores/pokeStore.js","components/Card/index.js","components/PokeTable/index.js","components/StatsPanel/index.js","components/MainField/index.js","App.js","serviceWorker.js","index.js"],"names":["pokeService","get","path","a","params","urlParams","URLSearchParams","Object","entries","options","method","request","Request","toString","fetch","response","json","PokeStore","getPokemonList","offset","cardsPerPage","data","getPokemonInfo","name","getAbilityInfo","id","this","pokemonList","currentPokemonName","then","values","results","map","pokemonData","decorate","observable","Card","props","imgUrlFront","process","imgUrlBack","types","translate","isFront","updateData","pokemonName","setTimeout","index","pokeStore","sprites","front_default","back_default","k","type","className","style","transform","onClick","e","updateCurrentPokemon","onMouseEnter","switchAvatarView","onMouseLeave","src","alt","typeIcons","key","title","React","Component","computed","observer","PokeTable","updatePokemonList","pokeName","StatsPanel","updatePanel","reaction","updateStats","updateAbilities","statsList","abilitiesList","stats","slice","reverse","stat","value","base_stat","abilities","abil","ability","url","split","res","descr","effect_entries","effect","Promise","all","resAbilities","length","MainField","App","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f593e3cd.chunk.js","sourcesContent":["const webApiUrl = \"https://pokeapi.co/api/v2/\";\r\n\r\nclass PokeService {\r\n  get = async (path, params = {}) => {\r\n    const urlParams = new URLSearchParams(Object.entries(params));\r\n    const options = {\r\n      method: \"GET\",\r\n    }\r\n    // if there're no params, then don't add them to request url (together with question mark)\r\n    const request = new Request(webApiUrl + path + (!!urlParams.toString() ? \"?\" + urlParams : \"\"), options);\r\n    const response = await fetch(request);\r\n    return response.json();\r\n  }\r\n}\r\n\r\nconst pokeService = new PokeService();\r\n\r\nexport default pokeService;","import { observable, decorate } from 'mobx';\r\nimport pokeService from '../pokeService'\r\n\r\nclass PokeStore {\r\n  constructor() {\r\n    this.cardsPerPage = 10;\r\n    this.pokemonList = [];\r\n    this.currentPokemonName = \"\";\r\n  }\r\n\r\n  updateCurrentPokemon(name) {\r\n    this.currentPokemonName = name;\r\n  }\r\n\r\n  updatePokemonList(offset) {\r\n    this.getPokemonList(offset).then((response) => {\r\n      this.pokemonList = Object.values(response.results).map((pokemonData) => pokemonData.name)\r\n    });\r\n  }\r\n\r\n  // using pokeService\r\n  getPokemonList = async (offset) => {\r\n    const data = await pokeService.get(\"pokemon/\", {'offset': offset, 'limit': this.cardsPerPage});\r\n    return data;\r\n  }\r\n\r\n  getPokemonInfo = async(name) => {\r\n    const data = await pokeService.get(\"pokemon/\" + name + \"/\");\r\n    return data;\r\n  }\r\n\r\n  getAbilityInfo = async(id) => {\r\n    const data = await pokeService.get(\"ability/\" + id + \"/\");\r\n    return data;\r\n  }\r\n}\r\n\r\ndecorate(PokeStore, {\r\n  cardsPerPage: observable,\r\n  pokemonList: observable,\r\n  currentPokemonName: observable\r\n});\r\n\r\nexport default new PokeStore();","import React from 'react';\r\nimport { observable, decorate, computed } from 'mobx';\r\nimport { observer } from 'mobx-react'\r\n// import project storage\r\nimport pokeStore from '../../stores/pokeStore'\r\n// import component styles\r\nimport './style.css';\r\n\r\nclass Card extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.pokemonData = {\r\n      imgUrlFront: process.env.PUBLIC_URL + \"/blue-pokeball.png\",\r\n      imgUrlBack: process.env.PUBLIC_URL + \"/blue-pokeball.png\",\r\n      types: []\r\n    };\r\n    this.translate = \"\";\r\n    this.isFront = true;\r\n\r\n    this.updateData(this.props.pokemonName);\r\n  }\r\n\r\n  // animate card appearance\r\n  componentDidMount() {\r\n    setTimeout(() => this.translate = \"translate(0, 0)\", (this.props.index + 1) * 100);\r\n  }\r\n\r\n  // switch pokemon image between front & back depending on card hover\r\n  switchAvatarView(isFront) {\r\n    this.isFront = isFront;\r\n  }\r\n\r\n  updateData(name) {\r\n    pokeStore.getPokemonInfo(name).then((response) => {\r\n      this.pokemonData.imgUrlFront = response.sprites.front_default;\r\n      this.pokemonData.imgUrlBack = response.sprites.back_default;\r\n      this.pokemonData.types = response.types.map(k => k.type.name);\r\n    });\r\n  }\r\n\r\n  get typeIcons() {\r\n    return this.pokemonData.types.map(type => \r\n      <img\r\n        className=\"card-type\"\r\n        src={process.env.PUBLIC_URL + \"/types/\" + type + \".png\"} \r\n        alt={type}\r\n        key={type}\r\n        title={type}\r\n      />\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={\"Card\" + (this.props.pokemonName === pokeStore.currentPokemonName ? \" active\" : \"\")}\r\n        style={{transform: this.translate}}\r\n        onClick={(e) => pokeStore.updateCurrentPokemon(this.props.pokemonName)}\r\n        onMouseEnter={(e) => this.switchAvatarView(false)}\r\n        onMouseLeave={(e) => this.switchAvatarView(true)}\r\n      >\r\n        <div className=\"card-img-wrapper\">\r\n          { this.isFront \r\n          ? <img className=\"card-img\" src={this.pokemonData.imgUrlFront} alt=\"Pokemon avatar\" /> \r\n          : <img className=\"card-img\" src={this.pokemonData.imgUrlBack} alt=\"Pokemon avatar\" /> \r\n          }\r\n        </div>\r\n        <div className=\"card-name\">{this.props.pokemonName}</div>\r\n        <div className=\"card-types\">{this.typeIcons}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ndecorate(Card, {\r\n  pokemonData: observable,\r\n  translate: observable,\r\n  isFront: observable,\r\n  typeIcons: computed\r\n});\r\n\r\nexport default observer(Card);","import React from 'react';\r\nimport { observer } from 'mobx-react'\r\n// import project storage\r\nimport pokeStore from '../../stores/pokeStore'\r\n// import used components\r\nimport Card from '../Card'\r\n// import component's styles\r\nimport './style.css';\r\n\r\nclass PokeTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    pokeStore.updatePokemonList();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"PokeTable\">\r\n        {pokeStore.pokemonList.map((pokeName, index) => \r\n          <Card key={pokeName} pokemonName={pokeName} index={index} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(PokeTable);","import React from 'react';\r\nimport { observable, decorate, reaction, computed } from 'mobx';\r\nimport { observer } from 'mobx-react'\r\n// import project storage\r\nimport pokeStore from '../../stores/pokeStore'\r\n// import component styles\r\nimport './style.css';\r\n\r\nclass StatsPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.statsList = [];\r\n    this.abilitiesList = [];\r\n  }\r\n\r\n  updatePanel = reaction(\r\n    () => pokeStore.currentPokemonName,\r\n    (pokemonName) => {\r\n      this.updateStats(pokemonName);\r\n      this.updateAbilities(pokemonName);\r\n    }\r\n  )\r\n\r\n  updateStats(name) {\r\n    pokeStore.getPokemonInfo(name).then(response => {\r\n      this.statsList = response.stats.slice().reverse().map((stat) => {\r\n        return {\r\n          name: stat.stat.name,\r\n          value: stat.base_stat\r\n        }\r\n      })\r\n    });\r\n  }\r\n\r\n  updateAbilities(name) {\r\n    pokeStore.getPokemonInfo(name).then(async response => {\r\n      let abilities = await response.abilities.map((abil) =>\r\n        pokeStore.getAbilityInfo(abil.ability.url.split('/').reverse()[1])  // get info by using ability id\r\n          .then(async (res) => await {\r\n            name: abil.ability.name,\r\n            descr: res.effect_entries[0].effect\r\n          })\r\n      );\r\n      Promise.all(abilities).then((resAbilities) => {\r\n        this.abilitiesList = resAbilities;\r\n      });\r\n    });\r\n  }\r\n\r\n  get stats() {\r\n    if (this.statsList.length === 0) return null;\r\n    return (\r\n      <div key=\"statistics\" className=\"info-block\">\r\n        <p key=\"statistics-title\" className=\"title\">Statistics</p>\r\n        {this.statsList.map(stat => (\r\n          <p key={stat.name}>\r\n            <span key={stat.name + \"-stat\"} className=\"stat-name\">{stat.name}</span>:\r\n            <span key={stat.name + \"-value\"} className=\"stat-value\"> {stat.value}</span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  get abilities() {\r\n    if (this.abilitiesList.length === 0) return null;\r\n    return (\r\n      <div key=\"abilities\" className=\"info-block\">\r\n        <p key=\"abilities-title\" className=\"title\">Abilities</p>\r\n        {this.abilitiesList.map(ability => [\r\n          <p key={ability.name + \"-abil\"} className=\"abil-name\">{ability.name}</p>,\r\n          <p key={ability.name + \"-descr\"} className=\"abil-descr\">{ability.descr}</p>\r\n        ])}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <aside className=\"StatsPanel\">\r\n        <div className=\"pokemon-name\">{pokeStore.currentPokemonName || \"Pokemon Stats\"}</div>\r\n        <div className=\"info-wrapper\">\r\n          {this.stats || <img src={process.env.PUBLIC_URL + \"/blue-pokeball.png\"} alt=\"template pokeball\" />}\r\n          {this.abilities}\r\n        </div>\r\n      </aside>\r\n    );\r\n  }\r\n}\r\n\r\ndecorate(StatsPanel, {\r\n  statsList: observable,\r\n  abilitiesList: observable,\r\n  stats: computed,\r\n  abilities: computed\r\n});\r\n\r\nexport default observer(StatsPanel);","import React from 'react';\r\n// import used components\r\nimport PokeTable from '../PokeTable'\r\nimport StatsPanel from '../StatsPanel'\r\n// import component styles\r\nimport './style.css';\r\n\r\nfunction MainField() {\r\n  return (\r\n    <div className=\"MainField\"> \r\n      <div className=\"container\">\r\n        <StatsPanel />\r\n        <PokeTable />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainField;","import React from 'react';\r\n// import used components\r\nimport MainField from './components/MainField'\r\n// import component styles\r\nimport './index.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div id=\"App\">\r\n      <header id=\"AppHeader\">\r\n        <h1>Pokedex</h1>\r\n      </header>\r\n      <MainField />\r\n      <footer id=\"AppFooter\">\r\n        Made by <strong>@<a href=\"http://t.me/ireknazm\">ireknazm</a></strong> for iDecisionGames\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();   // disabled yet"],"sourceRoot":""}