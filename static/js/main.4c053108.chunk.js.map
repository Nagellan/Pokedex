{"version":3,"sources":["pokeService.js","stores/pokeStore.js","components/Card/index.js","components/PokeTable/index.js","components/StatsPanel/index.js","components/MainField/index.js","App.js","serviceWorker.js","index.js"],"names":["pokeService","get","path","a","params","urlParams","URLSearchParams","Object","entries","options","method","request","Request","toString","fetch","response","json","PokeStore","getCurrentPokemon","computed","currentPokemonName","updatePokemonList","offset","cardsPerPage","data","getPokemonInfo","name","getAbilityInfo","id","this","pokemonList","numOfCards","decorate","observable","pokeStore","Card","observer","props","pokemonData","imgUrlFront","process","imgUrlBack","types","typeIcons","transTranslate","updateData","pokemonName","isFront","setTimeout","incrNumOfCards","then","sprites","front_default","back_default","map","k","type","updateTypeIcons","forEach","push","className","src","alt","key","title","style","transform","onClick","e","updateCurrentPokemon","onMouseEnter","switchAvatarView","onMouseLeave","React","Component","PokeTable","store","cards","drawCards","values","results","StatsPanel","pokemonInfo","abilities","observe","change","updatePokemonInfo","newValue","updateAbilities","abil","ability","url","split","reverse","res","effect_entries","effect","abils","Promise","all","abilsRes","stats","slice","stat","base_stat","MainField","App","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c053108.chunk.js","sourcesContent":["const webApiUrl = \"https://pokeapi.co/api/v2/\";\r\n\r\nclass PokeService {\r\n  get = async (path, params = {}) => {\r\n    const urlParams = new URLSearchParams(Object.entries(params));\r\n    const options = {\r\n      method: \"GET\",\r\n    }\r\n    // if there're no params, then don't add them to request url (together with question mark)\r\n    const request = new Request(webApiUrl + path + (!!urlParams.toString() ? \"?\" + urlParams : \"\"), options);\r\n    const response = await fetch(request);\r\n    return response.json();\r\n  }\r\n}\r\n\r\nconst pokeService = new PokeService();\r\n\r\nexport default pokeService;","import pokeService from '../pokeService'\r\nimport { observable, decorate, computed } from 'mobx';\r\n\r\nclass PokeStore {\r\n  constructor() {\r\n    this.cardsPerPage = 10;\r\n    this.pokemonList = [];\r\n    this.numOfCards = 0;\r\n    this.currentPokemonName = \"\";\r\n  }\r\n\r\n  getCurrentPokemon = computed(() => this.currentPokemonName);\r\n\r\n  updateCurrentPokemon(name) {\r\n    this.currentPokemonName = name;\r\n  }\r\n\r\n  incrNumOfCards() {\r\n    this.numOfCards += 1;\r\n  }\r\n\r\n  updatePokemonList = async (offset) => {\r\n    const data = await pokeService.get(\"pokemon/\", {'offset': offset, 'limit': this.cardsPerPage});\r\n    return data;\r\n  }\r\n\r\n  getPokemonInfo = async(name) => {\r\n    const data = await pokeService.get(\"pokemon/\" + name + \"/\");\r\n    return data;\r\n  }\r\n\r\n  getAbilityInfo = async(id) => {\r\n    const data = await pokeService.get(\"ability/\" + id + \"/\");\r\n    return data;\r\n  }\r\n}\r\n\r\ndecorate(PokeStore, {\r\n  currentPokemonName: observable,\r\n  getCurrentPokemon: observable\r\n});\r\n\r\nconst pokeStore = new PokeStore();\r\n\r\nexport default pokeStore;","import React from 'react';\r\nimport { observable, decorate } from 'mobx';\r\nimport { observer } from 'mobx-react'\r\n// import project storage\r\nimport pokeStore from '../../stores/pokeStore'\r\n// import component styles\r\nimport './style.css';\r\n\r\nconst Card = observer(\r\n  class Card extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.pokemonData = observable({\r\n        imgUrlFront: process.env.PUBLIC_URL + \"/blue-pokeball.png\",\r\n        imgUrlBack: process.env.PUBLIC_URL + \"/blue-pokeball.png\",\r\n        types: []\r\n      });\r\n      this.typeIcons = observable([null]);\r\n      this.transTranslate = observable([null]);\r\n      this.updateData(this.props.pokemonName);\r\n      this.isFront = true;\r\n    }\r\n\r\n    componentDidMount() {\r\n      setTimeout(() => this.transTranslate[0] = \"translate(0, 0)\", + pokeStore.numOfCards*100);\r\n      pokeStore.incrNumOfCards();\r\n    }\r\n\r\n    updateData(name) {\r\n      pokeStore.getPokemonInfo(name).then((response) => {\r\n        this.pokemonData.imgUrlFront = response.sprites.front_default;\r\n        this.pokemonData.imgUrlBack = response.sprites.back_default;\r\n        this.pokemonData.types = response.types.map(k => k.type.name);\r\n        this.updateTypeIcons();\r\n      });\r\n    }\r\n\r\n    updateTypeIcons() {\r\n      this.pokemonData.types.forEach(type => {\r\n        this.typeIcons.push(\r\n          <img\r\n            className=\"card-type\"\r\n            src={process.env.PUBLIC_URL + \"/types/\" + type + \".png\"} \r\n            alt={type}\r\n            key={type}\r\n            title={type}\r\n          />\r\n        );\r\n      })\r\n    }\r\n\r\n    switchAvatarView() {\r\n      this.isFront = !this.isFront;\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div\r\n          className={\"Card\" + (this.props.pokemonName === pokeStore.currentPokemonName ? \" active\" : \"\")}\r\n          style={{transform: this.transTranslate[0]}}\r\n          onClick={(e) => pokeStore.updateCurrentPokemon(this.props.pokemonName, e)}\r\n          onMouseEnter={(e) => this.switchAvatarView()}\r\n          onMouseLeave={(e) => this.switchAvatarView()}\r\n        >\r\n          <div className=\"card-img-wrapper\">\r\n            { this.isFront \r\n            ? <img className=\"card-img\" src={this.pokemonData.imgUrlFront} alt=\"Pokemon avatar\" /> \r\n            : <img className=\"card-img\" src={this.pokemonData.imgUrlBack} alt=\"Pokemon avatar\" /> \r\n            }\r\n          </div>\r\n          <div className=\"card-name\">{this.props.pokemonName}</div>\r\n          <div className=\"card-types\">{this.typeIcons}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n)\r\n\r\ndecorate(Card, {\r\n  isFront: observable\r\n});\r\n\r\nexport default Card;","import React from 'react';\r\nimport { observable } from 'mobx'\r\nimport { observer } from 'mobx-react'\r\n// import project storage\r\nimport pokeStore from '../../stores/pokeStore'\r\n// import used components\r\nimport Card from '../Card'\r\n// import component's styles\r\nimport './style.css';\r\n\r\nconst PokeTable = observer(\r\n  class PokeTable extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.store = pokeStore;\r\n      this.cards = observable([]);\r\n      this.drawCards(0);\r\n    }\r\n\r\n    drawCards(offset) {\r\n      this.store.updatePokemonList(offset).then((response) => {\r\n        Object.values(response.results).forEach((pokemonData) => {\r\n          this.cards.push(<Card key={pokemonData.name} pokemonName={pokemonData.name} />);\r\n        });\r\n      });\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"PokeTable\">\r\n          {this.cards}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n)\r\n\r\nexport default PokeTable;","import React from 'react';\r\nimport { observable, decorate } from 'mobx';\r\nimport { observer } from 'mobx-react'\r\n// import project storage\r\nimport pokeStore from '../../stores/pokeStore'\r\n// import component styles\r\nimport './style.css';\r\n\r\nconst StatsPanel = observer(\r\n  class StatsPanel extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.pokemonInfo = null;\r\n      this.abilities = null;\r\n      pokeStore.getCurrentPokemon.observe((change) => {\r\n        this.updatePokemonInfo(change.newValue);\r\n        this.updateAbilities(change.newValue);\r\n      })\r\n    }\r\n\r\n    updateAbilities(name) {\r\n      pokeStore.getPokemonInfo(name).then(async response => {\r\n        let abils = await response.abilities.map((abil) =>\r\n          pokeStore.getAbilityInfo(abil.ability.url.split('/').reverse()[1])\r\n            .then(async (res) => await [\r\n              <p key={abil.ability.name+\"skill\"} className=\"skill\">{abil.ability.name}</p>,\r\n              <p key={abil.ability.name+\"descr\"} className=\"descr\">{res.effect_entries[0].effect}</p>\r\n            ])\r\n        );\r\n        Promise.all(abils).then((abilsRes) => {\r\n          this.abilities = (\r\n            <div key=\"abilities\" className=\"stats-block\">\r\n              <p key=\"abilities-title\" className=\"title\">Abilities</p>\r\n              {abilsRes}\r\n            </div>\r\n          );\r\n        });\r\n      });\r\n    }\r\n\r\n\r\n\r\n    updatePokemonInfo(name) {\r\n      pokeStore.getPokemonInfo(name).then(response => {\r\n        this.pokemonInfo = (\r\n          <div key=\"statistics\" className=\"stats-block\">\r\n            <p key=\"statistics-title\" className=\"title\">Statistics</p>\r\n            {response.stats.slice().reverse().map((stat) =>\r\n              <p key={stat.stat.name}>\r\n                <span key={stat.stat.name+\"char\"} className=\"char\">{stat.stat.name}</span>:\r\n                <span key={stat.stat.name+\"qual\"} className=\"qual\"> {stat.base_stat}</span>\r\n              </p>\r\n            )}\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <aside className=\"StatsPanel\">\r\n          <div className=\"pokemon-name\">{pokeStore.currentPokemonName || \"Pokemon Stats\"}</div>\r\n          <div className=\"info-wrapper\">\r\n            {this.pokemonInfo || <img src={process.env.PUBLIC_URL + \"/blue-pokeball.png\"} alt=\"template pokeball\" />}\r\n            {this.abilities}\r\n          </div>\r\n        </aside>\r\n      );\r\n    }\r\n  }\r\n)\r\n\r\ndecorate(StatsPanel, {\r\n  pokemonInfo: observable,\r\n  abilities: observable\r\n});\r\n\r\n\r\n\r\nexport default StatsPanel;","import React from 'react';\r\n// import used components\r\nimport PokeTable from '../PokeTable'\r\nimport StatsPanel from '../StatsPanel'\r\n// import component styles\r\nimport './style.css';\r\n\r\nfunction MainField() {\r\n  return (\r\n    <div className=\"MainField\"> \r\n      <div className=\"container\">\r\n        <StatsPanel />\r\n        <PokeTable />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainField;","import React from 'react';\r\n// import used components\r\nimport MainField from './components/MainField'\r\n// import component styles\r\nimport './index.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div id=\"App\">\r\n      <header id=\"AppHeader\">\r\n        <h1>Pokedex</h1>\r\n      </header>\r\n      <MainField />\r\n      <footer id=\"AppFooter\">\r\n        Made by <strong>@<a href=\"http://t.me/ireknazm\">ireknazm</a></strong> for iDecisionGames\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();   // disabled yet"],"sourceRoot":""}